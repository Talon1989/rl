import numpy as np
import gym


# env_2 = gym.make('SpaceInvaders-v0')
# print(env_2.observation_space)


env = gym.make('FrozenLake-v0')

#  we can get a random sample using env.observation_space.sample() or env.action_space.sample()
print(env.observation_space)
print(env.action_space)

print()
# env.P[state][action], actions=[0=left, 1=down, 2=right, 3=up], if out of bounds go back to same state
print(env.P[3][1])  # returns (trans proba, next state, reward, absorbing state?)

state = env.reset()

#  action selection

env.seed(6)

env.render()
# down command = probas: .3 left, .3 down, .3right
iter_1_log = env.step(1)  # returns tuple(selected state, reward, absorbing state?, proba)
env.render()
env.reset()


#  GENERATING AN EPISODE

def episode_generation():
    n_iterations = 20
    cumulative_reward, total_actions = 0, 0
    for iter in range(n_iterations):
        print(iter)
        random_action = env.action_space.sample()
        next_state, reward, absorbing_state, info = env.step(random_action)
        print('Iteration %d' % iter)
        cumulative_reward += reward
        total_actions += 1
        env.render()
        if absorbing_state:
            break
    env.reset()
    return cumulative_reward, total_actions




















































































































































































































































































































































































